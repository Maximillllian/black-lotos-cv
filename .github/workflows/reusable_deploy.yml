name: Reusable deploy

on:
  workflow_call:
    inputs:
      host_address: 
        required: true
        type: string
      container_name:
        required: true
        type: string
      branch:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      API_KEY_NAME: ${{ secrets.API_KEY_NAME }}
      API_KEY: ${{ secrets.API_KEY }}
      APP_PATH: ${{ secrets.APP_PATH }}
      CONTAINER_NAME: ${{ inputs.container_name }}
      PSWD: ${{ secrets.PSWD }}
      USER: ${{ secrets.USER }}
      HOST: ${{ secrets.HOST }}
      PORT: ${{ secrets.PORT }}
      ARTIFACT_HOST: ${{ secrets.ARTIFACT_HOST }}
      ARTIFACT_SSH_KEY: ${{ secrets.ARTIFACT_SSH_KEY }}
      DOCKER_IMAGE: ${{ secrets.DOCKER_REPO }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - name: DockerHub Build And Push
        uses: Abhishek-070/Dockerhub-Build-Push@v1.0
              
        with:
          registry_url: 'docker.io'
          repository_name: ${{ env.DOCKER_IMAGE }}
          user_name: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          image_version: ${{ github.sha }}
          docker_file: '.'
      - name: Set up SSH
        run: |
          env
          mkdir -p ~/.ssh
          echo "${{ env.ARTIFACT_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p 22 ${{ env.ARTIFACT_HOST }} >> ~/.ssh/known_hosts
          sudo apt-get install sshpass
      - name: Deploy to server
        run: |
          sshpass -p ${{ env.PSWD }} ssh -v -o StrictHostKeyChecking=no ${{ env.USER }}@${{ env.HOST }} <<'ENDSSH'

          docker pull ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          docker stop ${{ env.CONTAINER_NAME }}
          docker rm ${{ env.CONTAINER_NAME }}
          docker run --name ${{ env.CONTAINER_NAME }} \
            -e VIRTUAL_HOST=${{ inputs.host_address }} \
            -e VIRTUAL_PORT=8080 \
            --volume /var/run/docker.sock:/var/run/docker.sock \
            -dit ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          ENDSSH